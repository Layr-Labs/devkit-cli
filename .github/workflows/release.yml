name: Release (with lint and test)

on:
  push:
    tags:
      - "*"
  pull_request:
    branches: [ '**' ]

env:
  GOPRIVATE: github.com/Layr-Labs/*

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Install dependencies
        env:
          HOURGLASS_TOKEN: ${{ secrets.HOURGLASS_TOKEN }}
        run: |
          git config --global url."https://${HOURGLASS_TOKEN}@github.com/".insteadOf "https://github.com/"
          go mod tidy

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout 3m
  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: run tests
        env:
          HOURGLASS_TOKEN: ${{ secrets.HOURGLASS_TOKEN }}
        run: |
          git config --global url."https://${HOURGLASS_TOKEN}@github.com/".insteadOf "https://github.com/"
          go mod tidy
          make tests
  build-create-release:
    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/')
    needs: [lint, test]
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check and set release version
        env:
          REF: ${{ github.ref }}
        run: |
          ./scripts/version.sh $REF
      - name: Build binary
        env:
          HOURGLASS_TOKEN: ${{ secrets.HOURGLASS_TOKEN }}
          RELEASE_BUCKET_NAME: ${{ vars.RELEASE_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          git config --global url."https://${HOURGLASS_TOKEN}@github.com/".insteadOf "https://github.com/"
          go mod tidy
          
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "Building binary for version $VERSION"
          make release
          sudo chown -R $USER:$USER .
          ./scripts/bundleReleases.sh $VERSION
          
          for asset_name in $(ls ./release | grep '.tar');
          do
              asset="./release/${asset_name}"
              echo "Uploading ${asset_name}..."
              aws s3 cp "$asset" "s3://${RELEASE_BUCKET_NAME}/$VERSION/"
          done
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false
      # - name: Upload Release Asset
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     RELEASE_BUCKET_NAME: ${{ vars.RELEASE_BUCKET_NAME }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #   run: |
      #     set -x
      #     ls -al ./release
      #
      #     echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
      #     export upload_url=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed -e "s/{?name,label}//")
      #
      #     for asset_name in $(ls ./release | grep '.tar');
      #     do
      #       asset="./release/${asset_name}"
      #       echo "Uploading ${asset_name}..."
      #       curl --fail \
      #         -H "Authorization: token $GITHUB_TOKEN" \
      #         -H "Content-Type: $(file -b --mime-type "$asset")" \
      #         --data-binary @"$asset" \
      #         "${upload_url}?name=$asset_name"
      #     done
