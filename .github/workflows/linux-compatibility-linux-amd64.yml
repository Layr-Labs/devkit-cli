name: linux-compatibility-linux-amd64

on:
  push:
    branches:
      - main
  pull_request:
    branches: ["**"]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  linux-amd64-compatibility:
    name: Linux AMD64 Compatibility Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    strategy:
      matrix:
        # Test different Ubuntu versions to ensure broader compatibility
        ubuntu-version: ["20.04", "22.04", "24.04"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Free up disk space
        run: |
          docker system prune -f
          df -h

      - name: Build Linux AMD64 specific test image
        run: |
          docker build \
            --platform linux/amd64 \
            --add-host=host.docker.internal:host-gateway \
            -f docker/linux-test/Dockerfile \
            -t devkit-linux-amd64-test:${{ matrix.ubuntu-version }} \
            --build-arg BASE_IMAGE=ubuntu:${{ matrix.ubuntu-version }} \
            .

      - name: Make script executable
        run: chmod +x ./scripts/linux-compatibility.sh

      - name: Run Linux AMD64 compatibility tests
        env:
          DOCKER_IMAGE_TAG: ${{ matrix.ubuntu-version }}
        run: |
          echo "üîß Testing on Ubuntu ${{ matrix.ubuntu-version }} (linux/amd64)"
          # Modify the script to use our specific image
          sed "s/devkit-linux-test/devkit-linux-amd64-test:${{ matrix.ubuntu-version }}/g" \
            scripts/linux-compatibility.sh > scripts/linux-compatibility-amd64.sh
          chmod +x scripts/linux-compatibility-amd64.sh
          ./scripts/linux-compatibility-amd64.sh

      - name: Test cross-compilation for Linux AMD64
        run: |
          echo "üî® Testing cross-compilation to linux/amd64..."
          make build/linux-amd64
          file release/linux-amd64/devkit | grep "ELF 64-bit LSB executable, x86-64"

      - name: Save test results as artifact
        if: always()
        run: |
          # Try to extract test results from the container if it exists
          docker run --rm --add-host=host.docker.internal:host-gateway \
            devkit-linux-amd64-test:${{ matrix.ubuntu-version }} \
            cat test-results.txt > test-results-${{ matrix.ubuntu-version }}.txt 2>/dev/null || \
            echo "Could not extract test results for Ubuntu ${{ matrix.ubuntu-version }}"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-compatibility-results-ubuntu-${{ matrix.ubuntu-version }}
          path: test-results-${{ matrix.ubuntu-version }}.txt
          retention-days: 30

      - name: Archive test results on failure
        if: failure()
        run: |
          echo "üìÅ Collecting debug information for Ubuntu ${{ matrix.ubuntu-version }}..."
          docker images | grep devkit || echo "No devkit images found"
          docker ps -a | grep devkit || echo "No devkit containers found"
          docker system df
          echo "Platform info:"
          uname -a
          echo "Docker version:"
          docker version

      - name: Cleanup Docker resources
        if: always()
        run: |
          docker container prune -f || true
          docker image prune -f || true
          docker rmi devkit-linux-amd64-test:${{ matrix.ubuntu-version }} || true 